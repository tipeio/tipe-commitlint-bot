const createCheck = require('../src/createCheck')

const message =
  '\n### Commit Lint ✅\n\nFound 0 problems, and 0 warnings.\n\n\n\nYou may need to [change the commit messages][ref] to comply with the repository [contributing guidelines][guidelines].\n\n### WIP ✅\n\nReady for review!\n\n--------\n\n🐱 This comment was generated by [**tipe-cat-bot**][repo]. Please report issues [here][issues].\n\nHappy coding!\n\n[ref]: https://help.github.com/articles/changing-a-commit-message/\n[repo]: https://github.com/tipeio/tipe-cat-bot\n[issues]: https://github.com/tipeio/tipe-cat-bot/issues\n[guidelines]: https://github.com/tipeio/tipe-conventions/blob/4987a13f29bc7e5fcbb428dd7b245fedcd5bf6ce/COMMIT_CONVENTION.md#git-commit-message-convention\n'

const data = {
  name: 'TipeCat',
  head_branch: 'gg',
  head_sha: '9d3adf3c6fdca6c2df2467d35b30d6e5a47bc817',
  status: 'completed',
  conclusion: 'success',
  output: {
    title: 'TipeCat',
    summary: message
  }
}

const params = {
  sha: data.head_sha,
  context: 'TipeCat',
  state: 'success',
  description: `Lint: the lint status. WIP: the wip status.`,
  target_url: 'https://github.com/tipecat'
}

const successContext = {
  payload: {
    pull_request: {
      head: {
        ref: data.head_branch,
        sha: data.head_sha
      }
    }
  },
  github: {
    checks: {
      create: jest.fn()
    },
    repos: {
      createStatus: jest.fn()
    }
  },
  repo: jest.fn().mockReturnValue({
    owner: 'oliviaoddo',
    repo: 'test',
    ...data
  })
}

const errorContext = {
  payload: {
    pull_request: {
      head: {
        ref: data.head_branch,
        sha: data.head_sha
      }
    }
  },
  github: {
    checks: {
      create: jest.fn().mockRejectedValue({ code: 403 })
    },
    repos: {
      createStatus: jest.fn()
    }
  },
  repo: jest.fn().mockReturnValue({
    owner: 'oliviaoddo',
    repo: 'test',
    ...params
  })
}

describe('The createCheck function', () => {
  test('should call the github check create function', async () => {
    await createCheck(successContext, 'success', message)
    expect(successContext.github.checks.create).toHaveBeenCalledWith(
      expect.objectContaining({
        owner: 'oliviaoddo',
        repo: 'test',
        ...data
      })
    )
  })
  test('should call the github repo function', async () => {
    await createCheck(successContext, 'success', message)
    expect(successContext.repo).toHaveBeenCalledWith(
      expect.objectContaining(data)
    )
  })

  test('should call createStatus on 403', async () => {
    await createCheck(errorContext, 'success', message)
    expect(errorContext.github.repos.createStatus).toHaveBeenCalledWith(
      expect.objectContaining({
        ...params,
        owner: 'oliviaoddo',
        repo: 'test'
      })
    )
  })
})
